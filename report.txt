セッション名：A-4 適切なイテレーション期間の設定に向けて【講演＋ミニワークショップ】
　塩浜 龍志さん、鷲崎 弘宜先生
レポーター名：masakitk
記事タイトル：
　
　
記事：

[見出し]このセッションを選んだ理由

XP祭りに1日参加しました。レポートを書くにあたり、ボリューム的にもどれか1セッションに絞りたいので、
どれにしようか考えたのですが、
・参加してみて面白かった。
・午後のセッションがマルチトラックになっていて、一人ではすべてのセッションに参加できないので、レポートを読みたい人がいるはずだ
・ツイートがtogatterにまとめられるだろうけど、ワークショップだと参加者がツイートできずtogatterだと様子がわからない
ということで、A-4のイテレーション期間についてのセッションのレポートを書こうと思います。

[見出し]自分のコンテキスト

私は50名程度のソフトウェア会社に所属しており、エンドユーザーと直接契約での受託開発が主な業務です。
自分自身の業務では、保守フェーズに入っている案件が多くて、決まったイテレーション期間は特に設けず、お客様より
この機能がいつまでに欲しいんだけど、という形で数週間から1〜2ヶ月の納期を希望されることが多く、そこをリリース
ターゲットにしてチケット管理システム(tracを使っています)でマイルストーンを切る、という感じでやっています。
ただ、大きな案件をやるとしたら、いくつかのストーリーの塊でマイルストーンを切るか、タイムボックス切って
やることになると思うのですが、タイムボックス切るとしたらをどのように設定すると良いのか、というのは確かに
悩むところだと思います。

[見出し]セッション内容

このセッションは、まずはじめに講演があり、途中にワークショップをやってその後また講演という構成になっていました。
講演については、アメリカにて行われたAgile2012でも発表した内容だそうです。ただ、Agile2012ではワークショップが
できなかったので、それをXP祭りでやってみようという企画だそうです。

[見出し]前半講演

早稲田大学のように、アカデミックに研究する人(Researcher)と、現場で実践する人(Practitioner)の間で、
Researcherは研究結果のResult、Knowledgeを提供し、PractitionerはDataを提供する、といった相互にフィードバック
しあって、Agile開発をよりよいものにしていこう！というお話がありました。

Agile開発が成功するための要素はいろんなものがあるが、ここではIteration期間に注目しました。
うまく設定できれば良い影響があり、間違った設定をしてしまうと悪い影響がでると思われます。
短くすればよい、というものでもないでしょう。
ではどのように決めていますか？と会場に質問。
会場からは、「プロジェクト開始当初は大きなバックログがあり2週間の設定が適切と感じていたが、
今は保守フェーズに入りバックログが小さいものが多くなったので、もう少し短くしても良いと感じている」
という回答がありました。

塩浜さんは、途中で期間を変えるということは今回の研究ではやっていないことを断った上で、最初に良い設定を
するとプロジェクト全体として良い結果になるというお話をされました。具体的どのように期間を決めたらよいかは、
書籍にあるように、1週間、一ヶ月にするのが最適か、というとそんなことはないだろうということでした。

(出典をメモってなかったのですが)Agile開発で失敗した原因として、イテレーション期間の設定をまちがえた、
という理由が多いという調査結果があるそうです。
最適な期間は、プロジェクトごとのコンテキスト次第で変わってくるものなので、1ヶ月がいい、1週間がいいという
ものではないということです。

ここで、イテレーション期間の設定が、プロジェクトの結果にどのような影響があるか、ということを体験する
ワークショップに入りました。(すみません、ワークショップ説明の紙、写真取るの忘れてしまいました。)

[見出し]ワークショップ

ワークショップ概要：
　1テーブル4〜5名
　一人が顧客役、残りが開発者約
　顧客役の人に、ある英単語を構成する、1つのアルファベットが書かれているトランプ大カードが複数枚渡される。
　顧客は英単語を知っているが、開発者側は知らない。
　そのカードをシャッフルして、文字が見えるように適当に置いておき、それを開発者が1枚ずつとって単語に並べていく。
　1イテレーションの開始時にイテレーション計画として、仕様の伝達、フィードバックの提示ができる。
　具体的には、
　　・何文字目になんの文字が来るのかを伝えることができる
　　・今並んでいるカードを、1枚ずつ正しいか正しくないかを指摘できる
　1週間に3回行動できる。
　イテレーション計画は1回の行動となる。
　開発者は、1回の行動で、1枚のカードを並べるか置き換える事ができる。
　つまり、
　　イテレーションを1週間とすると、1回イテレーション計画を行い、2回開発者が行動する。
　　イテレーションを2週間とすると、1回イテレーション計画を行い、5回開発者が行動する。
　　イテレーションを3週間とすると、1回イテレーション計画を行い、8回開発者が行動する。
　ということになります。

　このような形で3つの単語でワークショップを行いました。
　programming
　自分は開発者役になり、最初の単語の作業に取り掛かります。
　最初は1週間のイテレーションにしました。
　ヒントは「みなさんが好きなもの」ということでした。
　答えは「programming」でした。
　うちのチームはイテレーションを1週間で、6週間、18回の行動がかかりました。
　最初は検討もつかず、最初のイテレーション計画で先頭の文字だけ教えてもらって、次の行動でpを配置、
　その次の行動で、適当に母音を配置しました。
　2回目のイテレーション計画では、2文字目を教えてもらって、2文字目を入れ替え3文字目に母音oを並べました。
　3回目のイテレーション計画では、4文字目を教えてもらい、gを4文字目に配置、rを5文字目に配置しました。
　オープンされていたカードが、あまりシャッフルされていなかったこともあり、このあたりで回答がわかり、
　あとは並べていくといった形になりました。
　
　やってみて感じたのは、単語がわかってしまうと、フィードバックが要らなくなる、その分の行動が
　無駄になり、開発に回したほうが効率的だ、ということでした。
　しかし今回は最初の取っ掛かりがあまりわからなかったので1週間のイテレーションで良かったかもしれません。
　
　2回目のヒントは「Javaのクラスです」というもの。
　答えは「LinkedHashMap」（実際にはすべて大文字のカードです）
　これも、最初は皆目見当がつかず、1文字目を教えてもらってスタート。
　2文字目以降はその後は適当に4文字並べました。
　次のイテレーションで、2文字目を教えてもらい、そこで自分がわかったので、2〜5文字目を置き換え、
　6文字目を配置してlinkedまで完成、
　3回目のイテレーションで、7〜11まで配置しlinkedhashmまで完成
　4回目のイテレーションの3つ目の行動でlinkedhashmapが完成しました。
　2回目のイテレーションで気づいたので良かったですが、そこでわからなかったら無駄になってしまう行動が
　増えるなー、と思いました。
　
　3回目のヒントは「車のメーカー、11文字」というものでした。
　これは、かなり単語が限定されるだろう、ということでオープンされたカードを見て単語が分かる可能性が
　高そうです。ということでフィードバックはなくてもいけるはずと判断し、3週間のイテレーションにしました。
　カードを開けてみると、案の定答えがわかりました「lamborghini」でした。
　1文字目だけ最初に教えてもらって後は並べていくだけ、2回目のイテレーションの4つ目の行動で完成です。
　
その後各テーブルからの感想で、うちのテーブルからはどうせ一か八かフィードバックをなくすなら、
4週間を1イテレーションにしてしまえば、イテレーション計画で1、文字を並べるのに11でぴったり4週間に
収まったので、そうすべきだったということを話しました。
他のテーブルでは、顧客役の人が、開発者の様子を見ることによって、どんな指示、フィードバックを
与えたらよいかが分かるよね、という話がありました。

[見出し]後半講演

その後にまた講演がありました。
Agile開発の一般的なモデルを捉えるということで、まずリリース計画があり、イテレーションが何回かあるという
構造を定義します。イテレーションにはPlanningがありImplimentationがあり、Review、Releaseがある、という
形になっています。

各フェーズで、いままでのいろいろな研究を元にプロジェクト毎のコンテキストの要素をInputとして、イテレーション期間を
Outputするように定式化します。5つの要素とは、
　・Duration(期間）
　・Developer(開発者)
　・Requirements(要求、重要度と規模(コスト))
　・Complexity(複雑性・依存関係)
　・Uncertainty(要求変更の度合い)
でした。
このシミュレータを永和さんの事例レポートに対して適用したところ、6日と算出されたそうです。
実際は1週間で回していて、メンバからはもう少し長くても良かったのでは、という感想があったらしく
一応的外れではない期間が出ているのではということです。

要素としてはUncertaintyとComplexityに注目されていて、Uncertaintyに関しては変更が多ければ、
期間を短くなるという相関が、Complexityについては複雑になれば期間を長くするという相関が
見られるとのことでした。
ただし、一番変更が多いケースについては、複雑性が一番高い時に期間が1番短くなっていました。
(見間違いでなければ。そこを質疑応答で聞こうとしたんですが時間切れで聞けませんでした。
懇親会で聞こうと思ってたんですが、忘れてしまいました。)


最後に質疑応答
・ワークショップの結果から、途中でイテレーションの期間を変えたほうが効果的だと感じたけれど
　そのような研究はされていますか？。
　シミュレーションでは途中でイテレーション期間を変えるということも考慮はしている。

[見出し]感想

最後に感想としては、全員同席のようなプラクティスを実践できれば、いつでもフィードバックをもらえて、
しかもそんなにコストにならないかもしれないですが、顧客と別の場所で開発するような状況だと、計画、
フィードバックなどのコストがそこそこ掛かってしまうので、それをどの程度の頻度でやるのか、
といったことはたしかに考えないといけないなぁ、と感じました。

また、質疑応答で出たように、プロジェクトの途中でイテレーションの長さを変えるというのは、有効な気が
するので、今後そのような視点での研究結果などがでてくると面白いかもしれません。

最後となりますが、有意義なセッションに参加できてよかったです。
浜崎さん、鷲崎先生、どうもありがとうございました。




　
　
　





